<!DOCTYPE html>
<html lang="zh-CN">
<head>
  <meta charset="UTF-8">
<meta name="viewport" content="width=device-width">
<meta name="theme-color" content="#222">
<meta name="generator" content="Hexo 5.4.0">


  <link rel="apple-touch-icon" sizes="180x180" href="/images/apple-touch-icon-next.png">
  <link rel="icon" type="image/png" sizes="32x32" href="/images/favicon-32x32-next.png">
  <link rel="icon" type="image/png" sizes="16x16" href="/images/favicon-16x16-next.png">
  <link rel="mask-icon" href="/images/logo.svg" color="#222">

<link rel="stylesheet" href="/css/main.css">



<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@5.15.3/css/all.min.css" integrity="sha256-2H3fkXt6FEmrReK448mDVGKb3WW2ZZw35gI7vqHOE4Y=" crossorigin="anonymous">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/animate.css@3.1.1/animate.min.css" integrity="sha256-PR7ttpcvz8qrF57fur/yAx1qXMFJeJFiA6pSzWi0OIE=" crossorigin="anonymous">

<script class="next-config" data-name="main" type="application/json">{"hostname":"www.ylif4.cf","root":"/","images":"/images","scheme":"Gemini","version":"8.6.1","exturl":false,"sidebar":{"position":"left","display":"post","padding":18,"offset":12},"copycode":true,"bookmark":{"enable":false,"color":"#222","save":"auto"},"fancybox":false,"mediumzoom":false,"lazyload":false,"pangu":false,"comments":{"style":"tabs","active":null,"storage":true,"lazyload":false,"nav":null},"motion":{"enable":true,"async":false,"transition":{"post_block":"fadeIn","post_header":"fadeInDown","post_body":"fadeInDown","coll_header":"fadeInLeft","sidebar":"fadeInUp"}},"prism":false,"i18n":{"placeholder":"搜索...","empty":"没有找到任何搜索结果：${query}","hits_time":"找到 ${hits} 个搜索结果（用时 ${time} 毫秒）","hits":"找到 ${hits} 个搜索结果"}}</script><script src="/js/config.js"></script>
<meta name="description" content="可持久化简介可持久化数据结构保留了每一次修改的历史版本。  部分可持久化：可以访问所有历史版本，但只能修改最新版本。 完全可持久化：所有历史版本都可以访问和修改。  我们有一个暴力的想法，就是每次修改都将整体复制一份。这样的空间复杂度是$\operatorname{O}(NM)$的。 可持久化为我们提供了一个思路：每一次只复制变化的部分，保留不变的部分，空间复杂度为$\operatorname{O">
<meta property="og:type" content="article">
<meta property="og:title" content="可持久化数据结构">
<meta property="og:url" content="https://www.ylif4.cf/%E5%8F%AF%E6%8C%81%E4%B9%85%E5%8C%96%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84">
<meta property="og:site_name" content="YLiF4">
<meta property="og:description" content="可持久化简介可持久化数据结构保留了每一次修改的历史版本。  部分可持久化：可以访问所有历史版本，但只能修改最新版本。 完全可持久化：所有历史版本都可以访问和修改。  我们有一个暴力的想法，就是每次修改都将整体复制一份。这样的空间复杂度是$\operatorname{O}(NM)$的。 可持久化为我们提供了一个思路：每一次只复制变化的部分，保留不变的部分，空间复杂度为$\operatorname{O">
<meta property="og:locale" content="zh_CN">
<meta property="og:image" content="https://pic2.zhimg.com/v2-e41c74ec213257cec4f3c3429e9d037d_r.jpg">
<meta property="article:published_time" content="2021-07-26T13:51:54.631Z">
<meta property="article:modified_time" content="2021-07-26T13:58:48.930Z">
<meta property="article:author" content="LewisLi">
<meta name="twitter:card" content="summary">
<meta name="twitter:image" content="https://pic2.zhimg.com/v2-e41c74ec213257cec4f3c3429e9d037d_r.jpg">


<link rel="canonical" href="https://www.ylif4.cf/%E5%8F%AF%E6%8C%81%E4%B9%85%E5%8C%96%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84">



<script class="next-config" data-name="page" type="application/json">{"sidebar":"","isHome":false,"isPost":true,"lang":"zh-CN","comments":true,"permalink":"https://www.ylif4.cf/%E5%8F%AF%E6%8C%81%E4%B9%85%E5%8C%96%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84","path":"可持久化数据结构","title":"可持久化数据结构"}</script>

<script class="next-config" data-name="calendar" type="application/json">""</script>
<title>可持久化数据结构 | YLiF4</title>
  




  <noscript>
    <link rel="stylesheet" href="/css/noscript.css">
  </noscript>
</head>

<body itemscope itemtype="http://schema.org/WebPage" class="use-motion">
  <div class="headband"></div>

  <main class="main">
    <header class="header" itemscope itemtype="http://schema.org/WPHeader">
      <div class="header-inner"><div class="site-brand-container">
  <div class="site-nav-toggle">
    <div class="toggle" aria-label="切换导航栏" role="button">
        <span class="toggle-line"></span>
        <span class="toggle-line"></span>
        <span class="toggle-line"></span>
    </div>
  </div>

  <div class="site-meta">

    <a href="/" class="brand" rel="start">
      <i class="logo-line"></i>
      <h1 class="site-title">YLiF4</h1>
      <i class="logo-line"></i>
    </a>
  </div>

  <div class="site-nav-right">
    <div class="toggle popup-trigger">
    </div>
  </div>
</div>



<nav class="site-nav">
  <ul class="main-menu menu">
        <li class="menu-item menu-item-home"><a href="/" rel="section"><i class="fa fa-home fa-fw"></i>首页</a></li>
        <li class="menu-item menu-item-tags"><a href="/tags/" rel="section"><i class="fa fa-tags fa-fw"></i>标签<span class="badge">0</span></a></li>
        <li class="menu-item menu-item-categories"><a href="/categories/" rel="section"><i class="fa fa-th fa-fw"></i>分类<span class="badge">0</span></a></li>
        <li class="menu-item menu-item-archives"><a href="/archives/" rel="section"><i class="fa fa-archive fa-fw"></i>归档<span class="badge">10</span></a></li>
  </ul>
</nav>




</div>
        
  
  <div class="toggle sidebar-toggle" role="button">
    <span class="toggle-line"></span>
    <span class="toggle-line"></span>
    <span class="toggle-line"></span>
  </div>

  <aside class="sidebar">

    <div class="sidebar-inner sidebar-nav-active sidebar-toc-active">
      <ul class="sidebar-nav">
        <li class="sidebar-nav-toc">
          文章目录
        </li>
        <li class="sidebar-nav-overview">
          站点概览
        </li>
      </ul>

      <div class="sidebar-panel-container">
        <!--noindex-->
        <div class="post-toc-wrap sidebar-panel">
            <div class="post-toc animated"><ol class="nav"><li class="nav-item nav-level-1"><a class="nav-link" href="#%E5%8F%AF%E6%8C%81%E4%B9%85%E5%8C%96%E7%AE%80%E4%BB%8B"><span class="nav-number">1.</span> <span class="nav-text">可持久化简介</span></a></li><li class="nav-item nav-level-1"><a class="nav-link" href="#%E5%8F%AF%E6%8C%81%E4%B9%85%E5%8C%96%E7%BA%BF%E6%AE%B5%E6%A0%91"><span class="nav-number">2.</span> <span class="nav-text">可持久化线段树</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#Luogu-P3919-%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E5%8F%AF%E6%8C%81%E4%B9%85%E5%8C%96%E7%BA%BF%E6%AE%B5%E6%A0%91-1%EF%BC%88%E5%8F%AF%E6%8C%81%E4%B9%85%E5%8C%96%E6%95%B0%E7%BB%84%EF%BC%89"><span class="nav-number">2.1.</span> <span class="nav-text">Luogu P3919 【模板】可持久化线段树 1（可持久化数组）</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#Luogu-P3834-%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E5%8F%AF%E6%8C%81%E4%B9%85%E5%8C%96%E7%BA%BF%E6%AE%B5%E6%A0%91-2%EF%BC%88%E4%B8%BB%E5%B8%AD%E6%A0%91%EF%BC%89"><span class="nav-number">2.2.</span> <span class="nav-text">Luogu P3834 【模板】可持久化线段树 2（主席树）</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#LOJ2402-THUPC-2017-%E5%A4%A9%E5%A4%A9%E7%88%B1%E5%B0%84%E5%87%BB-shooting"><span class="nav-number">2.3.</span> <span class="nav-text">LOJ2402 [THUPC 2017] 天天爱射击 &#x2F; shooting</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#CF916D-Jamie-and-To-do-List"><span class="nav-number">2.4.</span> <span class="nav-text">CF916D Jamie and To-do List</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%84%8F"><span class="nav-number">2.4.1.</span> <span class="nav-text">题目大意</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#%E9%A2%98%E8%A7%A3"><span class="nav-number">2.4.2.</span> <span class="nav-text">题解</span></a></li></ol></li></ol></li><li class="nav-item nav-level-1"><a class="nav-link" href="#%E5%8F%AF%E6%8C%81%E4%B9%85%E5%8C%96%E5%B9%B3%E8%A1%A1%E6%A0%91"><span class="nav-number">3.</span> <span class="nav-text">可持久化平衡树</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#Luogu-P3835-%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E5%8F%AF%E6%8C%81%E4%B9%85%E5%8C%96%E5%B9%B3%E8%A1%A1%E6%A0%91"><span class="nav-number">3.1.</span> <span class="nav-text">Luogu P3835 【模板】可持久化平衡树</span></a></li></ol></li><li class="nav-item nav-level-1"><a class="nav-link" href="#%E5%8F%AF%E6%8C%81%E4%B9%85%E5%8C%96-Trie"><span class="nav-number">4.</span> <span class="nav-text">可持久化 Trie</span></a><ol class="nav-child"><li class="nav-item nav-level-2"><a class="nav-link" href="#Luogu-P4735-%E6%9C%80%E5%A4%A7%E5%BC%82%E6%88%96%E5%92%8C"><span class="nav-number">4.1.</span> <span class="nav-text">Luogu P4735 最大异或和</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#BZOJ-2741-%E3%80%90FOTILE%E6%A8%A1%E6%8B%9F%E8%B5%9B%E3%80%91L"><span class="nav-number">4.2.</span> <span class="nav-text">BZOJ 2741 【FOTILE模拟赛】L</span></a></li></ol></li></ol></div>
        </div>
        <!--/noindex-->

        <div class="site-overview-wrap sidebar-panel">
          <div class="site-overview">
            <div class="site-author site-overview-item animated" itemprop="author" itemscope itemtype="http://schema.org/Person">
  <p class="site-author-name" itemprop="name">LewisLi</p>
  <div class="site-description" itemprop="description"></div>
</div>
<div class="site-state-wrap site-overview-item animated">
  <nav class="site-state">
      <div class="site-state-item site-state-posts">
          <a href="/archives/">
        
          <span class="site-state-item-count">10</span>
          <span class="site-state-item-name">日志</span>
        </a>
      </div>
  </nav>
</div>



          </div>
        </div>
      </div>
        <div class="back-to-top animated" role="button" aria-label="返回顶部">
          <i class="fa fa-arrow-up"></i>
          <span>0%</span>
        </div>
    </div>
  </aside>
  <div class="sidebar-dimmer"></div>


    </header>

    

<noscript>
  <div class="noscript-warning">Theme NexT works best with JavaScript enabled</div>
</noscript>


    <div class="main-inner post posts-expand">


  


<div class="post-block">
  
  

  <article itemscope itemtype="http://schema.org/Article" class="post-content" lang="zh-CN">
    <link itemprop="mainEntityOfPage" href="https://www.ylif4.cf/%E5%8F%AF%E6%8C%81%E4%B9%85%E5%8C%96%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84">

    <span hidden itemprop="author" itemscope itemtype="http://schema.org/Person">
      <meta itemprop="image" content="/images/avatar.gif">
      <meta itemprop="name" content="LewisLi">
      <meta itemprop="description" content="">
    </span>

    <span hidden itemprop="publisher" itemscope itemtype="http://schema.org/Organization">
      <meta itemprop="name" content="YLiF4">
    </span>
      <header class="post-header">
        <h1 class="post-title" itemprop="name headline">
          可持久化数据结构
        </h1>

        <div class="post-meta-container">
          <div class="post-meta">
    <span class="post-meta-item">
      <span class="post-meta-item-icon">
        <i class="far fa-calendar"></i>
      </span>
      <span class="post-meta-item-text">发表于</span>
      

      <time title="创建时间：2021-07-26 21:51:54 / 修改时间：21:58:48" itemprop="dateCreated datePublished" datetime="2021-07-26T21:51:54+08:00">2021-07-26</time>
    </span>

  
</div>

        </div>
      </header>

    
    
    
    <div class="post-body" itemprop="articleBody">
        <h1 id="可持久化简介"><a href="#可持久化简介" class="headerlink" title="可持久化简介"></a>可持久化简介</h1><p>可持久化数据结构保留了每一次修改的历史版本。</p>
<ul>
<li>部分可持久化：可以访问所有历史版本，但只能修改最新版本。</li>
<li>完全可持久化：所有历史版本都可以访问和修改。</li>
</ul>
<p>我们有一个暴力的想法，就是每次修改都将整体复制一份。这样的空间复杂度是$\operatorname{O}(NM)$的。</p>
<p>可持久化为我们提供了一个思路：每一次只复制变化的部分，保留不变的部分，空间复杂度为$\operatorname{O}(N+M)$。</p>
<h1 id="可持久化线段树"><a href="#可持久化线段树" class="headerlink" title="可持久化线段树"></a>可持久化线段树</h1><p>我们每一次修改都只会使树上$\log_2N$个节点发生变化。</p>
<p>我们动态开点地存每一个节点，在向下递归的过程中，每遇到一个需要修改的节点，就复制一份向下更新。</p>
<p>最后所有节点构成了一张图[<a target="_blank" rel="noopener" href="https://zhuanlan.zhihu.com/p/250565583">1</a>]：</p>
<p><img src="https://pic2.zhimg.com/v2-e41c74ec213257cec4f3c3429e9d037d_r.jpg"></p>
<h2 id="Luogu-P3919-【模板】可持久化线段树-1（可持久化数组）"><a href="#Luogu-P3919-【模板】可持久化线段树-1（可持久化数组）" class="headerlink" title="Luogu P3919 【模板】可持久化线段树 1（可持久化数组）"></a><a target="_blank" rel="noopener" href="https://www.luogu.com.cn/problem/P3919">Luogu P3919 【模板】可持久化线段树 1（可持久化数组）</a></h2><p>单点修改，单点查询的操作，可以使用可持久化线段树实现。</p>
<p>实际上有不带$\log$的做法，但是实现麻烦。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> ls, rs;</span><br><span class="line">    <span class="keyword">int</span> sum;</span><br><span class="line">&#125; t[N &lt;&lt; <span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> rt[N];</span><br><span class="line"><span class="keyword">int</span> tot;</span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123; t[k].sum = t[t[k].ls].sum + t[t[k].rs].sum; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p = ++tot;</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        t[p].sum = a[l];</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    t[p].ls = <span class="built_in">build</span>(l, mid), t[p].rs = <span class="built_in">build</span>(mid + <span class="number">1</span>, r);</span><br><span class="line">    <span class="built_in">pushup</span>(p);</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> loc, <span class="keyword">int</span> delta)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p = ++tot;</span><br><span class="line">    t[p] = t[k];</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        t[p].sum = delta;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (loc &lt;= mid)</span><br><span class="line">        t[p].ls = <span class="built_in">update</span>(t[p].ls, l, mid, loc, delta);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        t[p].rs = <span class="built_in">update</span>(t[p].rs, mid + <span class="number">1</span>, r, loc, delta);</span><br><span class="line">    <span class="built_in">pushup</span>(p);</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> pos)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span> t[k].sum;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (pos &lt;= mid) <span class="keyword">return</span> <span class="built_in">query</span>(t[k].ls, l, mid, pos);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">query</span>(t[k].rs, mid+<span class="number">1</span>, r, pos);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d &quot;</span>, a + i);</span><br><span class="line">    rt[<span class="number">0</span>] = <span class="built_in">build</span>(<span class="number">1</span>, n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>, v, op, loc, value; i&lt;=m; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;v, &amp;op, &amp;loc);</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;value);</span><br><span class="line">            rt[i] = <span class="built_in">update</span>(rt[v], <span class="number">1</span>, n, loc, value);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">query</span>(rt[v], <span class="number">1</span>, n, loc));</span><br><span class="line">            rt[i] = rt[v];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Luogu-P3834-【模板】可持久化线段树-2（主席树）"><a href="#Luogu-P3834-【模板】可持久化线段树-2（主席树）" class="headerlink" title="Luogu P3834 【模板】可持久化线段树 2（主席树）"></a><a target="_blank" rel="noopener" href="https://www.luogu.com.cn/problem/P3834">Luogu P3834 【模板】可持久化线段树 2（主席树）</a></h2><p>我们一般称可持久化线段树为主席树。但实际上，可持久化权值线段树才是主席树。</p>
<p>来源其实是黄嘉泰发明的用于求静态区间第$k$小的算法。</p>
<ul>
<li><p>首先构建一棵值全为0的可持久化线段树。</p>
</li>
<li><p>之后对原数组进行离散化。</p>
</li>
<li><p>然后我们按照原来$1 \to n$的顺序将<strong>离散化后</strong>的值，以1号版本为基准，插入到可持久化线段树内。</p>
</li>
<li><p>现在我们就可以查询区间$[1,R]$的第$k$小了。对于$[L,R]$的第$k$小，我们只需去除$[1,L-1]$即可。</p>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> ls, rs;</span><br><span class="line">    <span class="keyword">int</span> sum;</span><br><span class="line">&#125; t[N &lt;&lt; <span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> rt[N];</span><br><span class="line"><span class="keyword">int</span> tot;</span><br><span class="line"><span class="keyword">int</span> a[N], b[N], len;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">discreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memcpy</span>(b, a, <span class="built_in"><span class="keyword">sizeof</span></span>(a));</span><br><span class="line">    <span class="built_in">sort</span>(b + <span class="number">1</span>, b + <span class="number">1</span> + n);</span><br><span class="line">    len = <span class="built_in">unique</span>(b + <span class="number">1</span>, b + <span class="number">1</span> + n) - b - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">lower_bound</span>(b + <span class="number">1</span>, b + <span class="number">1</span> + len, val) - b; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p = ++tot;</span><br><span class="line">    <span class="keyword">if</span> (l == r)</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    t[p].ls = <span class="built_in">build</span>(l, mid), t[p].rs = <span class="built_in">build</span>(mid + <span class="number">1</span>, r);</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> delta)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p = ++tot;</span><br><span class="line">    t[p] = t[k], t[p].sum = t[k].sum + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (l == r)</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (delta &lt;= mid)</span><br><span class="line">        t[p].ls = <span class="built_in">insert</span>(t[p].ls, l, mid, delta);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        t[p].rs = <span class="built_in">insert</span>(t[p].rs, mid + <span class="number">1</span>, r, delta);</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>, delta = t[t[y].ls].sum - t[t[x].ls].sum;</span><br><span class="line">    <span class="keyword">if</span> (l == r)</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    <span class="keyword">if</span> (k &lt;= delta)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">query</span>(t[x].ls, t[y].ls, l, mid, k);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">query</span>(t[x].rs, t[y].rs, mid + <span class="number">1</span>, r, k - delta);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d &quot;</span>, a + i);</span><br><span class="line">    <span class="built_in">discreate</span>();</span><br><span class="line">    rt[<span class="number">0</span>] = <span class="built_in">build</span>(<span class="number">1</span>, len);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        rt[i] = <span class="built_in">insert</span>(rt[i - <span class="number">1</span>], <span class="number">1</span>, len, <span class="built_in">find</span>(a[i]));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> l, r, rk; m; m--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;l, &amp;r, &amp;rk);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, b[<span class="built_in">query</span>(rt[l - <span class="number">1</span>], rt[r], <span class="number">1</span>, len, rk)]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="LOJ2402-THUPC-2017-天天爱射击-shooting"><a href="#LOJ2402-THUPC-2017-天天爱射击-shooting" class="headerlink" title="LOJ2402 [THUPC 2017] 天天爱射击 / shooting"></a><a target="_blank" rel="noopener" href="https://loj.ac/p/2402">LOJ2402 [THUPC 2017] 天天爱射击 / shooting</a></h2><p>如果我们从子弹的角度看，我们需要知道有哪些木板还存在，并且还要将打破的木板删除。这样的暴力复杂度是难以接受的，也是极难实现的。我们考虑从木板的角度看：因为子弹按顺序打出，不会消失，所以一块木板能否被打碎只取决于包含在它这个区间内的子弹数量是否足以打破它。这就转换成了一个区间求和问题。</p>
<p>那我们怎么知道被哪颗子弹打碎呢？很显然就是第$s$颗打到它上面的子弹。</p>
<p>那就变成了一个静态区间第$k$小的问题，可以用主席树解决。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">4e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, Ans[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Query</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> x1, x2;</span><br><span class="line">    <span class="keyword">int</span> s;</span><br><span class="line">&#125; Q[N];</span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; pos[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> ls, rs;</span><br><span class="line">    <span class="keyword">int</span> sum;</span><br><span class="line">&#125; t[N&lt;&lt;<span class="number">5</span>];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls(k) t[k].ls</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs(k) t[k].rs</span></span><br><span class="line"><span class="keyword">int</span> cnt, rt[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123; t[k].sum = t[<span class="built_in">ls</span>(k)].sum + t[<span class="built_in">rs</span>(k)].sum; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p = ++cnt;</span><br><span class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span> p;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">ls</span>(p) = <span class="built_in">build</span>(l, mid), <span class="built_in">rs</span>(p) = <span class="built_in">build</span>(mid+<span class="number">1</span>, r);</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p = ++cnt;</span><br><span class="line">    t[p] = t[k];</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        t[p].sum++;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &lt;= mid) <span class="built_in">ls</span>(p) = <span class="built_in">update</span>(<span class="built_in">ls</span>(k), l, mid, x);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">rs</span>(p) = <span class="built_in">update</span>(<span class="built_in">rs</span>(k), mid+<span class="number">1</span>, r, x);</span><br><span class="line">    <span class="built_in">pushup</span>(p);</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!x || !y) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>, delta = t[<span class="built_in">ls</span>(y)].sum - t[<span class="built_in">ls</span>(x)].sum;</span><br><span class="line">    <span class="keyword">if</span> (t[y].sum - t[x].sum &lt; k) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span> l;</span><br><span class="line">    <span class="keyword">if</span> (k &lt;= delta) <span class="keyword">return</span> <span class="built_in">query</span>(<span class="built_in">ls</span>(x), <span class="built_in">ls</span>(y), l, mid, k);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">query</span>(<span class="built_in">rs</span>(x), <span class="built_in">rs</span>(y), mid+<span class="number">1</span>, r, k-delta);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mx;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;Q[i].x1, &amp;Q[i].x2, &amp;Q[i].s), mx = <span class="built_in">max</span>(mx, Q[i].x2);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]), pos[a[i]].<span class="built_in">push_back</span>(i), mx = <span class="built_in">max</span>(mx, a[i]);</span><br><span class="line">    rt[<span class="number">0</span>] = <span class="built_in">build</span>(<span class="number">1</span>, mx);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=mx; i++) &#123;</span><br><span class="line">        rt[i] = rt[i<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> j : pos[i]) &#123;</span><br><span class="line">            rt[i] = <span class="built_in">update</span>(rt[i], <span class="number">1</span>, m, j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="built_in">query</span>(rt[Q[i].x1<span class="number">-1</span>], rt[Q[i].x2], <span class="number">1</span>, m, Q[i].s);</span><br><span class="line">        Ans[x]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, Ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="CF916D-Jamie-and-To-do-List"><a href="#CF916D-Jamie-and-To-do-List" class="headerlink" title="CF916D Jamie and To-do List"></a><a target="_blank" rel="noopener" href="http://codeforces.com/problemset/problem/916/D">CF916D Jamie and To-do List</a></h2><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h3><p>您需要维护一个数据结构，支持以下操作：</p>
<ul>
<li><code>set s x</code>  将字符串 $s$ 的权值设为 $x$ ，如果没有则加入 $s$ 。</li>
<li><code>remove s</code>  删除 $s$ 。</li>
<li><code>query s </code>  查询有多少个字符串的权值小于 $s$ 。如果 $s$ 不存在则输出 <code>-1</code>。</li>
<li><code>undo x</code> 撤销之前的 $x$ 次操作。</li>
</ul>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>一看到撤销就知道要可持久化。</p>
<p>首先用<code>map</code>将字符串映射为整数。</p>
<p>在没有<code>undo</code>操作的情况下，用数组维护权值，权值线段树进行查询即可。</p>
<p>加入<code>undo</code>后就将上面两个东西可持久化就可以了。</p>
<p>tips：不要混用<code>cin</code>和<code>puts</code>，会<code>ILE</code>。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>, INF = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">int</span> n, id;</span><br><span class="line">map&lt;string, <span class="keyword">int</span>&gt; mp;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getid</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mp.<span class="built_in">count</span>(s)) <span class="keyword">return</span> mp[s];</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> mp[s] = ++id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> ls, rs;</span><br><span class="line">    <span class="keyword">int</span> sum;</span><br><span class="line">&#125; t[N&lt;&lt;<span class="number">7</span>];</span><br><span class="line"><span class="keyword">int</span> rt1[N&lt;&lt;<span class="number">1</span>], rt2[N&lt;&lt;<span class="number">1</span>], tot;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls(k) t[k].ls</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs(k) t[k].rs</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123; t[k].sum = t[<span class="built_in">ls</span>(k)].sum + t[<span class="built_in">rs</span>(k)].sum; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p = ++tot, mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    t[p] = t[k];</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        t[p].sum += v;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &lt;= mid) <span class="built_in">ls</span>(p) = <span class="built_in">update</span>(<span class="built_in">ls</span>(k), l, mid, x, v);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">rs</span>(p) = <span class="built_in">update</span>(<span class="built_in">rs</span>(k), mid+<span class="number">1</span>, r, x, v);</span><br><span class="line">    <span class="built_in">pushup</span>(p);</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> ql, <span class="keyword">int</span> qr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= ql &amp;&amp; r &lt;= qr) <span class="keyword">return</span> t[k].sum;</span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>, res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (ql &lt;= mid) res += <span class="built_in">query</span>(<span class="built_in">ls</span>(k), l, mid, ql, qr);</span><br><span class="line">    <span class="keyword">if</span> (qr &gt; mid) res += <span class="built_in">query</span>(<span class="built_in">rs</span>(k), mid+<span class="number">1</span>, r, ql, qr);</span><br><span class="line">    <span class="comment">// printf(&quot;rres=%d\n&quot;, res);</span></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">string s, op;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="literal">NULL</span>), cout.<span class="built_in">tie</span>(<span class="literal">NULL</span>);</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>, num, x; i&lt;=n; i++) &#123;</span><br><span class="line">        cin&gt;&gt;op;</span><br><span class="line">        rt1[i] = rt1[i<span class="number">-1</span>], rt2[i] = rt2[i<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">if</span> (op[<span class="number">0</span>] == <span class="string">&#x27;s&#x27;</span>) &#123;</span><br><span class="line">            cin&gt;&gt;s&gt;&gt;num;</span><br><span class="line">            x = <span class="built_in">getid</span>(s);</span><br><span class="line">            <span class="keyword">int</span> res = <span class="built_in">query</span>(rt1[i], <span class="number">1</span>, INF, x, x);</span><br><span class="line">            <span class="keyword">if</span> (res) rt2[i] = <span class="built_in">update</span>(rt2[i], <span class="number">1</span>, INF, res, <span class="number">-1</span>);</span><br><span class="line">            rt2[i] = <span class="built_in">update</span>(rt2[i], <span class="number">1</span>, INF, num, <span class="number">1</span>);</span><br><span class="line">            rt1[i] = <span class="built_in">update</span>(rt1[i], <span class="number">1</span>, INF, x, num-res);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op[<span class="number">0</span>] == <span class="string">&#x27;r&#x27;</span>) &#123;</span><br><span class="line">            cin&gt;&gt;s;</span><br><span class="line">            x = <span class="built_in">getid</span>(s);</span><br><span class="line">            <span class="keyword">int</span> res = <span class="built_in">query</span>(rt1[i], <span class="number">1</span>, INF, x, x);</span><br><span class="line">            rt1[i] = <span class="built_in">update</span>(rt1[i], <span class="number">1</span>, INF, x, -res);</span><br><span class="line">            <span class="keyword">if</span> (res) rt2[i] = <span class="built_in">update</span>(rt2[i], <span class="number">1</span>, INF, res, <span class="number">-1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (op[<span class="number">0</span>] == <span class="string">&#x27;q&#x27;</span>) &#123;</span><br><span class="line">            cin&gt;&gt;s;</span><br><span class="line">            x = <span class="built_in">getid</span>(s);</span><br><span class="line">            <span class="keyword">int</span> res = <span class="built_in">query</span>(rt1[i], <span class="number">1</span>, INF, x, x);</span><br><span class="line">            <span class="keyword">if</span> (res == <span class="number">0</span>) cout&lt;&lt;<span class="string">&quot;-1&quot;</span>&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (res == <span class="number">1</span>) cout&lt;&lt;<span class="string">&quot;0&quot;</span>&lt;&lt;endl;</span><br><span class="line">            <span class="keyword">else</span> cout&lt;&lt;<span class="built_in">query</span>(rt2[i], <span class="number">1</span>, INF, <span class="number">1</span>, res<span class="number">-1</span>)&lt;&lt;endl;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            cin&gt;&gt;num;</span><br><span class="line">            rt1[i] = rt1[i-num<span class="number">-1</span>], rt2[i] = rt2[i-num<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;flush;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="可持久化平衡树"><a href="#可持久化平衡树" class="headerlink" title="可持久化平衡树"></a>可持久化平衡树</h1><p>应用的并不多，权当一个了解。利用可持久化的思路可以快速打出来，这里不再赘述。</p>
<p>常说的可持久化平衡树一般指的就是可持久化 Treap。</p>
<h2 id="Luogu-P3835-【模板】可持久化平衡树"><a href="#Luogu-P3835-【模板】可持久化平衡树" class="headerlink" title="Luogu P3835 【模板】可持久化平衡树"></a><a target="_blank" rel="noopener" href="https://www.luogu.com.cn/problem/P3835">Luogu P3835 【模板】可持久化平衡树</a></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5e5</span> + <span class="number">5</span>, INF = <span class="number">2147483647</span>;</span><br><span class="line"><span class="keyword">int</span> n, rt[N];</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FHQ_Treap</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">        <span class="keyword">int</span> ls, rs;</span><br><span class="line">        <span class="keyword">int</span> rd, val, siz;</span><br><span class="line">    &#125; t[N * <span class="number">50</span>];</span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls(kk) t[kk].ls</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs(kk) t[kk].rs</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123; t[k].siz = t[<span class="built_in">ls</span>(k)].siz + t[<span class="built_in">rs</span>(k)].siz + <span class="number">1</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">newnode</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> k = ++cnt;</span><br><span class="line">        t[k].siz = <span class="number">1</span>;</span><br><span class="line">        t[k].val = v;</span><br><span class="line">        t[k].rd = <span class="built_in">rand</span>();</span><br><span class="line">        <span class="built_in">ls</span>(k) = <span class="built_in">rs</span>(k) = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> k;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">split</span><span class="params">(<span class="keyword">int</span> now, <span class="keyword">int</span> k, <span class="keyword">int</span> &amp;x, <span class="keyword">int</span> &amp;y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!now) &#123;</span><br><span class="line">            x = y = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (t[now].val &lt;= k) &#123;</span><br><span class="line">            x = ++cnt;</span><br><span class="line">            t[x] = t[now];</span><br><span class="line">            <span class="built_in">split</span>(<span class="built_in">rs</span>(x), k, <span class="built_in">rs</span>(x), y);</span><br><span class="line">            <span class="built_in">pushup</span>(x);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            y = ++cnt;</span><br><span class="line">            t[y] = t[now];</span><br><span class="line">            <span class="built_in">split</span>(<span class="built_in">ls</span>(y), k, x, <span class="built_in">ls</span>(y));</span><br><span class="line">            <span class="built_in">pushup</span>(y);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!x || !y)</span><br><span class="line">            <span class="keyword">return</span> x | y;</span><br><span class="line">        <span class="keyword">int</span> p = ++cnt;</span><br><span class="line">        <span class="keyword">if</span> (t[x].rd &lt; t[y].rd) &#123;</span><br><span class="line">            t[p] = t[x];</span><br><span class="line">            <span class="built_in">rs</span>(p) = <span class="built_in">merge</span>(<span class="built_in">rs</span>(p), y);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            t[p] = t[y];</span><br><span class="line">            <span class="built_in">ls</span>(p) = <span class="built_in">merge</span>(x, <span class="built_in">ls</span>(p));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">pushup</span>(p);</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> &amp;root, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x, y;</span><br><span class="line">        <span class="built_in">split</span>(root, v, x, y);</span><br><span class="line">        root = <span class="built_in">merge</span>(<span class="built_in">merge</span>(x, <span class="built_in">newnode</span>(v)), y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">(<span class="keyword">int</span> &amp;root, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a, b, c, d;</span><br><span class="line">        <span class="built_in">split</span>(root, v, a, b), <span class="built_in">split</span>(a, v - <span class="number">1</span>, c, d);</span><br><span class="line">        root = <span class="built_in">merge</span>(<span class="built_in">merge</span>(c, <span class="built_in">merge</span>(<span class="built_in">ls</span>(d), <span class="built_in">rs</span>(d))), b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">kth</span><span class="params">(<span class="keyword">int</span> now, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (k == t[<span class="built_in">ls</span>(now)].siz + <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">return</span> t[now].val;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (k &lt;= t[<span class="built_in">ls</span>(now)].siz)</span><br><span class="line">                now = <span class="built_in">ls</span>(now);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                k -= t[<span class="built_in">ls</span>(now)].siz + <span class="number">1</span>, now = <span class="built_in">rs</span>(now);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">rk</span><span class="params">(<span class="keyword">int</span> &amp;root, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x, y;</span><br><span class="line">        <span class="built_in">split</span>(root, val - <span class="number">1</span>, x, y);</span><br><span class="line">        <span class="keyword">int</span> res = t[x].siz + <span class="number">1</span>;</span><br><span class="line">        root = <span class="built_in">merge</span>(x, y);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">pre</span><span class="params">(<span class="keyword">int</span> &amp;root, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x, y, res;</span><br><span class="line">        <span class="built_in">split</span>(root, val - <span class="number">1</span>, x, y);</span><br><span class="line">        <span class="keyword">if</span> (!t[x].siz)</span><br><span class="line">            res = -INF;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            res = <span class="built_in">kth</span>(x, t[x].siz);</span><br><span class="line">        root = <span class="built_in">merge</span>(x, y);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">nxt</span><span class="params">(<span class="keyword">int</span> &amp;root, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x, y, res;</span><br><span class="line">        <span class="built_in">split</span>(root, val, x, y);</span><br><span class="line">        <span class="keyword">if</span> (!t[y].siz)</span><br><span class="line">            res = INF;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            res = <span class="built_in">kth</span>(y, <span class="number">1</span>);</span><br><span class="line">        root = <span class="built_in">merge</span>(x, y);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; fhq;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">srand</span>((<span class="keyword">unsigned</span>)<span class="built_in">time</span>(<span class="literal">NULL</span>));</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, op, v, x; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;v, &amp;op, &amp;x);</span><br><span class="line">        rt[i] = rt[v];</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="number">1</span>)</span><br><span class="line">            fhq.<span class="built_in">ins</span>(rt[i], x);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">2</span>)</span><br><span class="line">            fhq.<span class="built_in">del</span>(rt[i], x);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">3</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, fhq.<span class="built_in">rk</span>(rt[i], x));</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">4</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, fhq.<span class="built_in">kth</span>(rt[i], x));</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">5</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, fhq.<span class="built_in">pre</span>(rt[i], x));</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, fhq.<span class="built_in">nxt</span>(rt[i], x));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="可持久化-Trie"><a href="#可持久化-Trie" class="headerlink" title="可持久化 Trie"></a>可持久化 Trie</h1><p>每一次新插入字符串就新建一个根。</p>
<h2 id="Luogu-P4735-最大异或和"><a href="#Luogu-P4735-最大异或和" class="headerlink" title="Luogu P4735 最大异或和"></a><a target="_blank" rel="noopener" href="https://www.luogu.com.cn/problem/P4735">Luogu P4735 最大异或和</a></h2><p>咕咕咕咕咕</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">6e5</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> trie[N * <span class="number">24</span>][<span class="number">2</span>], lst[N * <span class="number">24</span>];</span><br><span class="line"><span class="keyword">int</span> s[N], rt[N], n, m, tot;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> k, <span class="keyword">int</span> p, <span class="keyword">int</span> q)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (k &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        lst[q] = i;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> c = s[i] &gt;&gt; k &amp; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (p)</span><br><span class="line">        trie[q][c ^ <span class="number">1</span>] = trie[p][c ^ <span class="number">1</span>];</span><br><span class="line">    trie[q][c] = ++tot;</span><br><span class="line">    <span class="built_in">insert</span>(i, k - <span class="number">1</span>, trie[p][c], trie[q][c]);</span><br><span class="line">    lst[q] = <span class="built_in">max</span>(lst[trie[q][<span class="number">0</span>]], lst[trie[q][<span class="number">1</span>]]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ask</span><span class="params">(<span class="keyword">int</span> now, <span class="keyword">int</span> val, <span class="keyword">int</span> k, <span class="keyword">int</span> lim)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (k &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> s[lst[now]] ^ val;</span><br><span class="line">    <span class="keyword">int</span> c = val &gt;&gt; k &amp; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (lst[trie[now][c ^ <span class="number">1</span>]] &gt;= lim)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">ask</span>(trie[now][c ^ <span class="number">1</span>], val, k - <span class="number">1</span>, lim);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">ask</span>(trie[now][c], val, k - <span class="number">1</span>, lim);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    lst[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">    rt[<span class="number">0</span>] = ++tot;</span><br><span class="line">    <span class="built_in">insert</span>(<span class="number">0</span>, <span class="number">23</span>, <span class="number">0</span>, rt[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>, x; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">        s[i] = s[i - <span class="number">1</span>] ^ x;</span><br><span class="line">        rt[i] = ++tot;</span><br><span class="line">        <span class="built_in">insert</span>(i, <span class="number">23</span>, rt[i - <span class="number">1</span>], rt[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="keyword">char</span> opt[<span class="number">2</span>];</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, opt);</span><br><span class="line">        <span class="keyword">if</span> (opt[<span class="number">0</span>] == <span class="string">&#x27;A&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> x;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">            rt[++n] = ++tot;</span><br><span class="line">            s[n] = s[n - <span class="number">1</span>] ^ x;</span><br><span class="line">            <span class="built_in">insert</span>(n, <span class="number">23</span>, rt[n - <span class="number">1</span>], rt[n]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> l, r, x;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;l, &amp;r, &amp;x);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">ask</span>(rt[r - <span class="number">1</span>], x ^ s[n], <span class="number">23</span>, l - <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="BZOJ-2741-【FOTILE模拟赛】L"><a href="#BZOJ-2741-【FOTILE模拟赛】L" class="headerlink" title="BZOJ 2741 【FOTILE模拟赛】L"></a><a target="_blank" rel="noopener" href="https://www.lydsy.com/JudgeOnline/problem.php?id=2741">BZOJ 2741 【FOTILE模拟赛】L</a></h2><p>分块+可持久化 01 Trie</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">12500</span>;</span><br><span class="line"><span class="keyword">int</span> len, blo[N], f[<span class="number">120</span>][N];</span><br><span class="line"><span class="keyword">int</span> rt[N*<span class="number">32</span>], ch[N*<span class="number">32</span>][<span class="number">2</span>], lst[N*<span class="number">32</span>], cnt;</span><br><span class="line"><span class="keyword">int</span> n, m, a[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> now, <span class="keyword">int</span> pre, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> u = rt[now] = ++cnt, v = rt[pre];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">30</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">int</span> x = val &gt;&gt; i &amp; <span class="number">1</span>;</span><br><span class="line">        ch[u][x ^ <span class="number">1</span>] = ch[v][x ^ <span class="number">1</span>];</span><br><span class="line">        u = ch[u][x] = ++cnt, v = ch[v][x];</span><br><span class="line">        lst[cnt] = now + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ask</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> u = rt[r], res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">30</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">int</span> x = val &gt;&gt; i &amp; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (lst[ch[u][x ^ <span class="number">1</span>]] &gt;= l + <span class="number">1</span>)</span><br><span class="line">            res |= <span class="number">1</span> &lt;&lt; i, u = ch[u][x ^ <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            u = ch[u][x];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    len = <span class="built_in">sqrt</span>(n);</span><br><span class="line">    <span class="built_in">ins</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    blo[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    	blo[i] = (i<span class="number">-1</span>) / len + <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, a + i);</span><br><span class="line">        a[i] ^= a[i - <span class="number">1</span>];</span><br><span class="line">        <span class="built_in">ins</span>(i, i - <span class="number">1</span>, a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = len; i &lt;= n; i += len) &#123;</span><br><span class="line">        <span class="keyword">int</span> k = i / len;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">            f[k][j] = <span class="built_in">max</span>(f[k][j - <span class="number">1</span>], <span class="built_in">ask</span>(i, j - <span class="number">1</span>, a[j]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> l, r, l2, ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>, &amp;l, &amp;r);</span><br><span class="line">        l = (l + ans) % n + <span class="number">1</span>, r = (r + ans) % n + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (l &gt; r)</span><br><span class="line">            <span class="built_in">swap</span>(l, r);</span><br><span class="line">        l--, ans = <span class="number">0</span>;</span><br><span class="line">        l2 = <span class="built_in">min</span>(blo[l] * len, r);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = l; i &lt;= l2; i++)</span><br><span class="line">            ans = <span class="built_in">max</span>(ans, <span class="built_in">ask</span>(l, r, a[i]));</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, f[blo[l]][r]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


    </div>

    
    
    

    <footer class="post-footer">

        

          <div class="post-nav">
            <div class="post-nav-item">
                <a href="/four-russian-%E7%AE%97%E6%B3%95" rel="prev" title="Four Russian 算法">
                  <i class="fa fa-chevron-left"></i> Four Russian 算法
                </a>
            </div>
            <div class="post-nav-item">
                <a href="/%E5%90%8E%E7%BC%80%E8%87%AA%E5%8A%A8%E6%9C%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0" rel="next" title="后缀自动机学习笔记">
                  后缀自动机学习笔记 <i class="fa fa-chevron-right"></i>
                </a>
            </div>
          </div>
    </footer>
  </article>
</div>






</div>
  </main>

  <footer class="footer">
    <div class="footer-inner">


<div class="copyright">
  &copy; 
  <span itemprop="copyrightYear">2021</span>
  <span class="with-love">
    <i class="fa fa-heart"></i>
  </span>
  <span class="author" itemprop="copyrightHolder">LewisLi</span>
</div>
  <div class="powered-by">由 <a href="https://hexo.io/" rel="noopener" target="_blank">Hexo</a> & <a href="https://theme-next.js.org/" rel="noopener" target="_blank">NexT.Gemini</a> 强力驱动
  </div>

    </div>
  </footer>

  
  <script src="https://cdn.jsdelivr.net/npm/animejs@3.2.1/lib/anime.min.js" integrity="sha256-XL2inqUJaslATFnHdJOi9GfQ60on8Wx1C2H8DYiN1xY=" crossorigin="anonymous"></script>
  <script src="https://cdn.jsdelivr.net/npm/@next-theme/pjax@0.5.0/pjax.min.js" integrity="sha256-3NkoLDrmHLTYj7csHIZSr0MHAFTXth7Ua/DDt4MRUAg=" crossorigin="anonymous"></script>
<script src="/js/comments.js"></script><script src="/js/utils.js"></script><script src="/js/motion.js"></script><script src="/js/next-boot.js"></script><script src="/js/pjax.js"></script>

  




  




  

  <script class="next-config" data-name="enableMath" type="application/json">true</script><script class="next-config" data-name="mathjax" type="application/json">{"enable":true,"tags":"none","js":{"url":"https://cdn.jsdelivr.net/npm/mathjax@3.2.0/es5/tex-mml-chtml.js","integrity":"sha256-r+3itOMtGGjap0x+10hu6jW/gZCzxHsoKrOd7gyRSGY="}}</script>
<script src="/js/third-party/math/mathjax.js"></script>



</body>
</html>
